<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../project_documentation.ent">
%BOOK_ENTITIES;
]>
<section id="_client_responsibilities">
    <title>Client Responsibilities</title>
    <para>The RESTAT client is responsible for creating and terminating transaction resources.</para>
    <section id="_starting_a_transaction">
        <title>Starting a Transaction</title>
        <para>
            Performing a POST on the
            <systemitem>transaction-manager</systemitem>
            URI with header as shown below will start a new transaction with a default timeout. A successful
            invocation
            returns a 201 HTTP status code and the Location header contains the URI of the newly created
            transaction
            resource, which we refer to as transaction-coordinator in the rest of this book. At least
            two related URLs
            will also be returned, one for use by the transaction terminator (typically referred to
            as the client) and
            one used for registering durable participation in the transaction (typically referred
            to as the server).
            These URIs are referred to as the transaction-terminator and
            <systemitem>transaction-enlistment</systemitem>
            URIs, respectively. Although uniform URL structures are used in the examples, these linked URLs can be
            of
            arbitrary format.
        </para>
        <programlisting language="html" linenumbering="unnumbered">
POST /transaction-manager HTTP/1.1
From: foo@bar.com
        </programlisting>
        <para>The corresponding response would be:</para>
        <programlisting language="html" linenumbering="unnumbered">
HTTP 1.1 201 Created
Location: /transaction-coordinator/1234
Link:&lt;/transaction-coordinator/1234/terminator&gt;; rel=”terminator”,
    &lt;/transaction-coordinator/1234/participant&gt;; rel=”durable-participant”,
    &lt;/transaction-coordinator/1234/vparticipant&gt;; rel=”volatile-participant”
        </programlisting>
        <para>
            The lifetime of the transaction resource can be controlled by including a timeout in milliseconds in the
            body of the POST request
        </para>
        <programlisting language="html" linenumbering="unnumbered">
POST /transaction-manager HTTP/1.1
From: foo@bar.com
Content-Type: text/plain
Content-Length: --

timeout=1000
        </programlisting>
        <para>
            Performing a HEAD on the
            <systemitem>transaction-coordinator</systemitem>
            URI returns the same link information.
        </para>
        <para>
            Performing a DELETE on the
            <systemitem>transaction-coordinator</systemitem>
            or
            <systemitem>transaction-enlistment</systemitem>
            URIs are not allowed (and an attempt to do so will result in a 403 status code).
        </para>
    </section>
    <section id="_obtaining_the_transaction_status">
        <title>Obtaining The Transaction Status</title>
        <para>
            Performing a GET on the
            <systemitem>transaction-coordinator</systemitem>
            URI returns the current status of the transaction:
        </para>
        <programlisting language="html" linenumbering="unnumbered">
GET /transaction-coordinator/1234 HTTP/1.1
Accept: application/txstatus
        </programlisting>
        <para>With an example response:</para>
        <programlisting language="html" linenumbering="unnumbered">
HTTP/1.1 200 OK
Content-Length: --
Content-Type: application/txstatus
Link:&lt;/transaction-coordinator/1234/terminator&gt;; rel=”terminator”,
    &lt;/transaction-coordinator/1234/participant&gt;; rel=”durable-participant”,
    &lt;/transaction-coordinator/1234/vparticipant&gt;; rel=”volatile-participant”

txstatus=TransactionActive
        </programlisting>
        <para>
            Additional information about the transaction, such as the number of participants and their individual
            URIs,
            is returned if the client specifies the application/txstatusext+xml media type. For full details
            of this
            extended media type please refer to the specification and to the xsd in the restat-util jar
            packaging (
            <ulink url="https://github.com/jbosstm/narayana/tree/master/rts/at/util/src/main/resources/restat.xsd">https://github.com/jbosstm/narayana/tree/master/rts/at/util/src/main/resources/restat.xsd
            </ulink>
            ).
        </para>
    </section>
    <section id="_propagating_the_context">
        <title>Propagating the Context</title>
        <para>
            When making an invocation on a resource that needs to participate in a transaction, either the
            <systemitem>transaction-coordinator</systemitem>
            URI or the
            <systemitem>transaction-enlistment</systemitem>
            URI (/transaction-coordinator/1234/participant in the previous example) needs to be transmitted to the
            resource.
            <remark>Alternatively, if the client knows which endpoints the service will use to cancel or commit its
                work, it can
                do the registration and skip this requirement to propagate the context).
            </remark>
            If the context is to be propagated then the mechanism is private to the service writer but the following
            OPTIONAL approach is recommended:
        </para>
        <itemizedlist>
            <listitem>
                <para>
                    The URI is passed as a Link header with the relevant service interaction.
                </para>
            </listitem>
        </itemizedlist>
        <para>
            If the RESTAT user follows this convention then we can provide tools to the service writer to
            automate
            transaction handling. For example, if the client wishes to make a transactional service request
            then it
            should include a link to the URI used for enlisting into a transaction (which the client may
            have obtained
            when it first created the transaction) as follows:
        </para>
        <programlisting language="html" linenumbering="unnumbered">
Link:&lt;/transaction-coordinator/1234/participant&gt;; rel=”durable-participant”
        </programlisting>
        <para>or</para>
        <programlisting language="html" linenumbering="unnumbered">
Link:&lt;/transaction-coordinator/1234&gt;; rel=”transaction-coordinator”
        </programlisting>
        <para>
            and similarly if the client wants to pass the volatile participant URI to the invoked REST service.
        </para>
    </section>
    <section id="_discovering_existing_transactions">
        <title>Discovering Existing Transactions</title>
        <para>
            Performing a GET on the
            <systemitem>transaction-manager</systemitem>
            URI with media type
            <systemitem>application/txlist</systemitem>
            returns a list of all
            <systemitem>transaction-coordinator</systemitem>
            URIs known to the coordinator (active and in recovery). The returned response includes a link header
            with
            <systemitem>rel</systemitem>
            attribute
            <systemitem>statistics</systemitem>
            linking to a resource that contains statistical information such as the number of transactions that have
            committed and aborted.
        </para>
        <para>
            Performing a GET on the
            <systemitem>transaction-manager</systemitem>
            URI with media type
            <systemitem>application/txstatusext+xml</systemitem>
            returns extended information about the transaction-manager resource such as how long it has been up and
            all
            <systemitem>transaction-coordinator</systemitem>
            URIs.
        </para>
    </section>
    <section id="_ending_the_transaction">
        <title>Ending the Transaction</title>
        <para>
            The client can PUT a document containing the desired transaction status to the
            <systemitem>transaction-terminator</systemitem>
            URI in order to control the outcome of the transaction. Upon termination, the resource and all
            associated
            resources are implicitly deleted. If the client wishes to commit the transaction it sends the
            following
            resource update request:
        </para>
        <programlisting language="html" linenumbering="unnumbered">PUT /transaction-coordinator/1234/terminator HTTP/1.1
From: foo@bar.com
Content-Type: application/txstatus
Content-Length: --

txstatus=TransactionCommitted</programlisting>
        <para>
            The response body contains the transaction outcome. The state of the transaction resource must be
            <systemitem>TransactionActive</systemitem>
            for this operation to succeed otherwise a 412 status code is returned.
        </para>
        <para>The transaction may be told to rollback with the following PUT request:</para>
        <programlisting language="html" linenumbering="unnumbered">
PUT /transaction-coordinator/1234/terminator HTTP/1.1
From: foo@bar.com
Content-Type: application/txstatus
Content-Length: --

txstatus=TransactionRolledBack
        </programlisting>
    </section>
</section>