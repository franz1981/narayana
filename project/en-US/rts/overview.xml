<?xml version='1.0' encoding='utf-8' ?>
<!DOCTYPE chapter PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
<!ENTITY % BOOK_ENTITIES SYSTEM "../project_documentation.ent">
%BOOK_ENTITIES;
]>
<section>

    <title>Overview</title>

    <para>
        This guide covers the REST interfaces to the Narayana Transaction Manager. The actual protocol implemented by
        RESTAT described in this book is taken from the draft RESTAT specification
        <ulink
            url="https://github.com/jbosstm/documentation/blob/master/rts/docs/REST-Atomic_v2_draft_8_comments_sept_4.pdf">https://github.com/jbosstm/documentation/blob/master/rest-tx/docs/RESTAT-v2-latest.pdf</ulink>
        . The specification is still evolving but has reached a stability level such that it can be used in real
        world
        environments.
    </para>
    <para>
        Atomic transactions are a well-known technique for guaranteeing consistency in the presence of
        failures. The ACID properties of atomic transactions (Atomicity, Consistency, Isolation, Durability) ensure
        that even in complex business applications consistency of state is preserved, despite concurrent accesses
        and failures. This is extremely useful fault-tolerance technique, especially when multiple, possibly remote
        resources are involved.
    </para>
    <para>
        Consistency is especially important in a web application with dynamic servers. When users navigate a
        web application, they are viewing snapshots of the server state. If the snapshot is computed within a
        transaction, the state returned to the user is consistent. For many applications this is important for
        otherwise the inconsistent view of the data could be confusing to the user. Many developers have the
        incorrect perception that they do not need transactions if all they are doing is reading a database.
        However, if you are doing multiple reads and you want them to be consistent, then you need to do them within
        a transaction.
    </para>
    <para>
        Furthermore, even in the simplest of system, a single user environment where all operations are
        idempotent, retrying requires the capability to remember the list of participating resources as well as the
        operations that must be re-transmitted, potentially many times. As we shall see, fortunately this is an
        inherent part of a transaction system, provided in a reliable manner such that it can tolerate its own
        failures as well as those that occur elsewhere within the environment.
    </para>
    <para>
        Although the Web and REST have progressed well without the need for transactions there are a class of
        applications where the use of transactions, or at least atomicity, would be beneficial. To support this
        need, we have created a RESTful interface to the Narayana transaction manager.
    </para>
</section>
